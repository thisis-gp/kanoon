name: Deploy to AWS

on:
  push:
    branches: [ prod ]
    paths:
      - 'Backend/**'
      - '.github/workflows/deploy-prod.yml'
  pull_request:
    types: [closed]
    branches: [ prod ]
    paths:
      - 'Backend/**'
  workflow_dispatch:

environment: production

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: kanoon-backend
  ECR_REGISTRY: 654654525844.dkr.ecr.us-east-1.amazonaws.com
  APP_RUNNER_SERVICE: kanoon-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/prod') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'prod') ||
      github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Clean up Docker environment
      run: |
        echo "ðŸ§¹ Cleaning up Docker environment before build..."
        docker system prune -af
        docker volume prune -f
        echo "âœ… Docker environment cleaned"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push Backend image
        cd Backend
        
        # Build image with fresh base
        docker build \
          --no-cache \
          --pull \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          .
        
        # Push both tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Update App Runner Service
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get the App Runner service ARN
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)
        
        if [ -z "$SERVICE_ARN" ]; then
          echo "App Runner service not found: $APP_RUNNER_SERVICE"
          exit 1
        fi
        
        echo "Updating App Runner service: $SERVICE_ARN"
        echo "Using image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
        # Update the service with new image
        aws apprunner start-deployment \
          --service-arn $SERVICE_ARN \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "'$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'",
              "ImageConfiguration": {
                "Port": "8000",
                "RuntimeEnvironmentVariables": {
                  "GROQ_API_KEY": "'${{ secrets.GROQ_API_KEY }}'",
                  "QDRANT_CLOUD_URL": "'${{ secrets.QDRANT_CLOUD_URL }}'",
                  "QDRANT_CLOUD_API_KEY": "'${{ secrets.QDRANT_CLOUD_API_KEY }}'",
                  "HOST": "0.0.0.0",
                  "PORT": "8000",
                  "ENVIRONMENT": "production"
                }
              },
              "ImageRepositoryType": "ECR"
            }
          }'
          
    - name: Wait for deployment to complete
      run: |
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)
        
        echo "Waiting for deployment to complete..."
        aws apprunner wait service-updated --service-arn $SERVICE_ARN
        
        # Get service status
        aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text
        
    - name: Deployment Summary
      run: |
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)
        SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text)
        
        echo "ðŸš€ Deployment completed!"
        echo "Service URL: $SERVICE_URL"
        echo "Image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo ""
        echo "ðŸ“‹ Next Steps:"
        echo "1. Test your API endpoints"
        echo "2. Check App Runner logs if needed"
        echo "3. Update frontend to use new backend URL if changed"
        
    - name: Cleanup
      if: always()
      run: |
        echo "ðŸ§¹ Cleaning up runner storage..."
        docker system prune -af
        docker volume prune -f
        echo "âœ… Cleanup completed"
